diff --git a/Makefile b/Makefile
index 80a3e30b..c820d855 100644
--- a/Makefile
+++ b/Makefile
@@ -62,9 +62,9 @@ export CXX = g++
 endif
 endif
 
-export LDFLAGS= -pthread -lm $(ADD_LDFLAGS) $(DMLC_LDFLAGS)
-export CFLAGS= -DDMLC_LOG_CUSTOMIZE=1 -std=c++11 -Wall -Wno-unknown-pragmas -Iinclude $(ADD_CFLAGS)
-CFLAGS += -I$(DMLC_CORE)/include -I$(RABIT)/include -I$(GTEST_PATH)/include
+export LDFLAGS= -pthread -lm $(ADD_LDFLAGS) $(DMLC_LDFLAGS) -L/home/xgboost/install/OneCCL/oneccl/build/_install/lib
+export CFLAGS= -g -DDMLC_LOG_CUSTOMIZE=1 -std=c++11 -Wall -Wno-unknown-pragmas -Iinclude $(ADD_CFLAGS) -ldl
+CFLAGS += -I$(DMLC_CORE)/include -I$(RABIT)/include -I$(GTEST_PATH)/include -I/home/xgboost/install/OneCCL/oneccl/build/_install/include
 #java include path
 export JAVAINCFLAGS = -I${JAVA_HOME}/include -I./java
 
@@ -127,7 +127,7 @@ jvm: jvm-packages/lib/libxgboost4j.so
 SRC = $(wildcard src/*.cc src/*/*.cc)
 ALL_OBJ = $(patsubst src/%.cc, build/%.o, $(SRC))
 AMALGA_OBJ = amalgamation/xgboost-all0.o
-LIB_DEP = $(DMLC_CORE)/libdmlc.a $(RABIT)/lib/$(LIB_RABIT)
+LIB_DEP = $(DMLC_CORE)/libdmlc.a $(RABIT)/lib/$(LIB_RABIT) /home/xgboost/install/OneCCL/oneccl/build/_install/lib/libccl.a
 ALL_DEP = $(filter-out build/cli_main.o, $(ALL_OBJ)) $(LIB_DEP)
 CLI_OBJ = build/cli_main.o
 include tests/cpp/xgboost_test.mk
diff --git a/jvm-packages/CMakeLists.txt b/jvm-packages/CMakeLists.txt
index 65c0924c..ae6a2d32 100644
--- a/jvm-packages/CMakeLists.txt
+++ b/jvm-packages/CMakeLists.txt
@@ -9,7 +9,9 @@ target_include_directories(xgboost4j
   ${PROJECT_SOURCE_DIR}/jvm-packages/xgboost4j/src/native
   ${PROJECT_SOURCE_DIR}/include
   ${PROJECT_SOURCE_DIR}/dmlc-core/include
-  ${PROJECT_SOURCE_DIR}/rabit/include)
+  ${PROJECT_SOURCE_DIR}/rabit/include
+  /home/xgboost/install/OneCCL/oneccl/build/_install/include
+)
 
 set_output_directory(xgboost4j ${PROJECT_SOURCE_DIR}/lib)
 set_target_properties(
@@ -19,4 +21,6 @@ set_target_properties(
 target_link_libraries(xgboost4j
   PRIVATE
   ${LINKED_LIBRARIES_PRIVATE}
-  ${JAVA_JVM_LIBRARY})
+  ${JAVA_JVM_LIBRARY}
+  /home/xgboost/install/OneCCL/oneccl/build/_install/lib/libccl.so
+)
diff --git a/jvm-packages/pom.xml b/jvm-packages/pom.xml
index aac20a41..7bffc135 100644
--- a/jvm-packages/pom.xml
+++ b/jvm-packages/pom.xml
@@ -306,7 +306,7 @@
                 <artifactId>maven-surefire-plugin</artifactId>
                 <version>2.19.1</version>
                 <configuration>
-                    <skipTests>false</skipTests>
+                    <skipTests>true</skipTests>
                     <useSystemClassLoader>false</useSystemClassLoader>
                 </configuration>
             </plugin>
diff --git a/jvm-packages/xgboost4j-spark/src/main/scala/ml/dmlc/xgboost4j/scala/spark/XGBoost.scala b/jvm-packages/xgboost4j-spark/src/main/scala/ml/dmlc/xgboost4j/scala/spark/XGBoost.scala
index c0354866..59892b77 100644
--- a/jvm-packages/xgboost4j-spark/src/main/scala/ml/dmlc/xgboost4j/scala/spark/XGBoost.scala
+++ b/jvm-packages/xgboost4j-spark/src/main/scala/ml/dmlc/xgboost4j/scala/spark/XGBoost.scala
@@ -20,6 +20,7 @@ import java.io.File
 import java.nio.file.Files
 
 import scala.collection.{AbstractIterator, mutable}
+import scala.util.Properties
 import scala.util.Random
 import scala.collection.JavaConverters._
 
@@ -389,8 +390,8 @@ object XGBoost extends Serializable {
       case "python" => new PyRabitTracker(nWorkers)
       case _ => new PyRabitTracker(nWorkers)
     }
-
-    require(tracker.start(trackerConf.workerConnectionTimeout), "FAULT: Failed to start tracker")
+    System.getenv.forEach((name, value) => println(s"$name: $value"))
+    // require(tracker.start(trackerConf.workerConnectionTimeout), "FAULT: Failed to start tracker")
     tracker
   }
 
@@ -446,8 +447,13 @@ object XGBoost extends Serializable {
       rabitEnv: java.util.Map[String, String],
       prevBooster: Booster,
       evalSetsMap: Map[String, RDD[XGBLabeledPoint]]): RDD[(Booster, Map[String, Array[Float]])] = {
-    if (evalSetsMap.isEmpty) {
+   var pmType = sys.env("CCL_PM_TYPE")
+   println("UMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa:::" + pmType)
+   if (evalSetsMap.isEmpty) {
       trainingData.mapPartitions(labeledPoints => {
+        println("mapPartitions:  UMAAAAAAAAAAAAAAAAAAAAAa::type:" + sys.env("CCL_PM_TYPE"))
+        println("mapPartitions:  UMAAAAAAAAAAAAAAA::worldsize:" + sys.env("CCL_WORLD_SIZE"))
+        System.getenv.forEach((name, value) => println(s"$name: $value"))
         val watches = Watches.buildWatches(xgbExecutionParams,
           processMissingValues(labeledPoints, xgbExecutionParams.missing,
             xgbExecutionParams.allowNonZeroForMissing),
@@ -547,6 +553,7 @@ object XGBoost extends Serializable {
     try {
       // Train for every ${savingRound} rounds and save the partially completed booster
       val tracker = startTracker(xgbExecParams.numWorkers, xgbExecParams.trackerConf)
+      println("Tracker start called....")
       val (booster, metrics) = try {
         val parallelismTracker = new SparkParallelismTracker(sc,
           xgbExecParams.timeoutRequestWorkers,
@@ -559,6 +566,7 @@ object XGBoost extends Serializable {
           trainForNonRanking(transformedTrainingData.right.get, xgbExecParams, rabitEnv,
             prevBooster, evalSetsMap)
         }
+        println("Train for non ranking done.........................")
         val sparkJobThread = new Thread() {
           override def run() {
             // force the job
@@ -566,7 +574,7 @@ object XGBoost extends Serializable {
           }
         }
         sparkJobThread.setUncaughtExceptionHandler(tracker)
-        sparkJobThread.start()
+        // sparkJobThread.start()
         val trackerReturnVal = parallelismTracker.execute(tracker.waitFor(0L))
         logger.info(s"Rabit returns with exit code $trackerReturnVal")
         val (booster, metrics) = postTrackerReturnProcessing(trackerReturnVal,
diff --git a/jvm-packages/xgboost4j/src/main/java/ml/dmlc/xgboost4j/java/Booster.java b/jvm-packages/xgboost4j/src/main/java/ml/dmlc/xgboost4j/java/Booster.java
index 8ebf781f..f1389848 100644
--- a/jvm-packages/xgboost4j/src/main/java/ml/dmlc/xgboost4j/java/Booster.java
+++ b/jvm-packages/xgboost4j/src/main/java/ml/dmlc/xgboost4j/java/Booster.java
@@ -87,6 +87,7 @@ public class Booster implements Serializable, KryoSerializable {
     }
     in.close();
     Booster ret = new Booster(new HashMap<String, Object>(), new DMatrix[0]);
+    new IOException("NOException Info: Ignore").printStackTrace();
     XGBoostJNI.checkCall(XGBoostJNI.XGBoosterLoadModelFromBuffer(ret.handle,os.toByteArray()));
     return ret;
   }
@@ -718,6 +719,7 @@ public class Booster implements Serializable, KryoSerializable {
       this.init(null);
       this.version = in.readInt();
       byte[] bytes = (byte[])in.readObject();
+      new IOException("NOException Info: Ignore").printStackTrace();
       XGBoostJNI.checkCall(XGBoostJNI.XGBoosterLoadModelFromBuffer(this.handle, bytes));
     } catch (XGBoostError ex) {
       ex.printStackTrace();
@@ -759,6 +761,7 @@ public class Booster implements Serializable, KryoSerializable {
       this.version = input.readInt();
       byte[] bytes = new byte[serObjSize];
       input.readBytes(bytes);
+      new IOException("NOException Info: Ignore").printStackTrace();
       XGBoostJNI.checkCall(XGBoostJNI.XGBoosterLoadModelFromBuffer(this.handle, bytes));
     } catch (XGBoostError ex) {
       logger.error(ex.getMessage(), ex);
diff --git a/jvm-packages/xgboost4j/src/main/java/ml/dmlc/xgboost4j/java/RabitTracker.java b/jvm-packages/xgboost4j/src/main/java/ml/dmlc/xgboost4j/java/RabitTracker.java
index 58b9b250..aee54dbd 100644
--- a/jvm-packages/xgboost4j/src/main/java/ml/dmlc/xgboost4j/java/RabitTracker.java
+++ b/jvm-packages/xgboost4j/src/main/java/ml/dmlc/xgboost4j/java/RabitTracker.java
@@ -129,17 +129,7 @@ public class RabitTracker implements IRabitTracker {
   }
 
   private boolean startTrackerProcess() {
-    try {
-      String trackerExecString = this.addTrackerProperties("python " + tracker_py +
-          " --log-level=DEBUG --num-workers=" + String.valueOf(numWorkers));
-
-      trackerProcess.set(Runtime.getRuntime().exec(trackerExecString));
-      loadEnvs(trackerProcess.get().getInputStream());
-      return true;
-    } catch (IOException ioe) {
-      ioe.printStackTrace();
-      return false;
-    }
+    return true;
   }
 
   private String addTrackerProperties(String trackerExecString) {
@@ -189,18 +179,7 @@ public class RabitTracker implements IRabitTracker {
               "shutdown signal, or manual interruptions. " +
               "Use the Scala RabitTracker for timeout support.");
     }
+    return 0;
 
-    try {
-      trackerProcess.get().waitFor();
-      int returnVal = trackerProcess.get().exitValue();
-      logger.info("Tracker Process ends with exit code " + returnVal);
-      stop();
-      return returnVal;
-    } catch (InterruptedException e) {
-      // we should not get here as RabitTracker is accessed in the main thread
-      e.printStackTrace();
-      logger.error("the RabitTracker thread is terminated unexpectedly");
-      return TrackerStatus.INTERRUPTED.getStatusCode();
-    }
   }
 }
diff --git a/make/config.mk b/make/config.mk
index bf10e1b8..639e5d36 100644
--- a/make/config.mk
+++ b/make/config.mk
@@ -22,10 +22,10 @@
 # export MPICXX = mpicxx
 
 # the additional link flags you want to add
-ADD_LDFLAGS =
+ADD_LDFLAGS =-L/home/xgboost/install/OneCCL/oneccl/build/_install/lib
 
 # the additional compile flags you want to add
-ADD_CFLAGS =
+ADD_CFLAGS =-I/home/xgboost/install/OneCCL/oneccl/build/_install/include
 
 # Whether enable openmp support, needed for multi-threading.
 USE_OPENMP = 1
@@ -52,7 +52,7 @@ endif
 # Rabit library version,
 # - librabit.a Normal distributed version.
 # - librabit_empty.a Non distributed mock version,
-LIB_RABIT = librabit.a
+LIB_RABIT = librabit_empty.a
 
 # path to libjvm.so
 LIBJVM=$(JAVA_HOME)/jre/lib/amd64/server
diff --git a/rabit b/rabit
--- a/rabit
+++ b/rabit
@@ -1 +1 @@
-Subproject commit 2f7fcff4d770a3eb4fba6b25ded74b45e196ccd6
+Subproject commit 2f7fcff4d770a3eb4fba6b25ded74b45e196ccd6-dirty
